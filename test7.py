# based on https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-22r1a.pdf
# n - the length of the bit string
# m - the length in bits of each template
# E - generated sequence
# B - the m-bit template to be matched
# M - the length in bits of the substring of Îµ to be tested.
# N - the number of independent blocks. N has been fixed at 8 in the test code

# see 3.7 section, Aperiodic Templates for small values
templates = [['01','10'],
			['001','011','100','110'],
			['0001','0011','0111','1000','1100','1110'],
			['00001','00011','00101','01011','00111','01111','11100','11010','10100','11000','10000','11110'],
			['000001','000011','000101','000111','001011','001101','001111','010011','010111','011111','100000','101000','101100','110000','110010','110100','111000','111010','111100','111110'],
			['0000001','0000011','0000101','0000111','0001001','0001011','0001101','0001111','0010011','0010101','0010111','0011011','0011101','0011111','0100011','0100111','0101011','0101111','0110111','0111111','1000000','1001000','1010000','1010100','1011000','1011100','1100000','1100010','1100100','1101000','1101010','1101100','1110000','1110010','1110100','1110110','1111000','1111010','1111100','1111110'],
			['00000001','00000011','00000101','00000111','00001001','00001011','00001101','00001111','00010011','00010101','00010111','00011001','00011011','00011101','00011111','00100011','00100101','00100111','00101011','00101101','00101111','00110101','00110111','00111011','00111101','00111111','01000011','01000111','01001011','01001111','01010011','01010111','01011011','01011111','01100111','01101111','01111111','10000000','10010000','10011000','10100000','10100100','10101000','10101100','10110000','10110100','10111000','10111100','11000000','11000010','11000100','11001000','11001010','11010000','11010010','11010100','11011000','11011010','11011100','11100000','11100010','11100100','11100110','11101000','11101010','11101100','11110000','11110010','11110100','11110110','11111000','11111010','11111100','11111110']]


import random
from scipy.special import gammaincc

# see 2.7 section
def non_overlapping_template_matching_test(E, m = 8, N = 8):
	n = len(E)
	M = int(n/N)
	blocks = [ E[i*M:(i+1)*M] for i in range(N) ]
	if m <= 8:
		B = random.choice(templates[m-2])
	else:
		B = [random.randint(0,1) for i in range(m)]
	W = []
	for j in range(N):
		W.append(0)
		position = 0
		while position + m < M:
			if blocks[j][position:position+m] == B:
				position += m
				W[j] += 1
			else:
				position += 1
	u = (M-m+1)/2**m
	sigma = M*( (1/(2**m)) - (((2*m)-1)/(2**(2*m))) )
	X_2_obs = 0
	for j in range(N):
		X_2_obs += ( ((W[j] - u)**2) / sigma )
	p = gammaincc(N/2, X_2_obs/2)
	return(p)

